name: Build and release
on:
  push:
    tags:
      - "v*"
jobs:
  determine-pex-platforms:
    strategy:
      matrix:
        include:
          - image: macos-latest
            arch: aarch64
          - image: macos-13
            os: macos
            arch: x86_64
          - os: linux
            image: ubuntu-20.04
            arch: x86_64
          - os: linux
            image: ubuntu-24.04-arm64
            arch: aarch64
          - os: windows
            image: windows-latest
            arch: x86_64
    runs-on: ${{ matrix.image }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Determine complete_platforms for pex
        run: |
          pip install pex
          pex3 interpreter inspect --markers --tags > ${{ matrix.os }}_py310_${{ matrix.arch }}.json
      - uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}_py310_${{ matrix.arch }}"
          path: "${{ matrix.os }}_py310_${{ matrix.arch }}.json"
          overwrite: true
  build-bin-artifacts:
    name: Build macOS binaries
    needs: [determine-pex-platforms]
    # Ideally this would run on macOS, which would enable combining the `determine-pex-platforms`,
    # `build-bin-artifacts-macos`, and `exercise-macos-artifacts` jobs.
    # But the `scie_binary` target does not appear to work on macOS.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: .*_py310_*
          path: build-support/pex_platforms
          merge-multiple: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: pantsbuild/actions/init-pants@v9
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('build-support/lockfiles/python-default.lock') }}
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://www.pantsbuild.org/2.21/docs/using-pants/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - name: Conformance
        run: |
          pants check ::
          pants test ::
      - name: Create binaries
        run: |
          pants package :roboto
          pants package :roboto-agent
      - name: Package .deb (linux only)
        if: matrix.os == 'linux'
        run: |
          VERSION="$(./dist/roboto-${{ matrix.os }}-${{ matrix.arch }} --version --suppress-upgrade-check)"
          mkdir -p roboto_deb/DEBIAN
          echo "Package: roboto" > roboto_deb/DEBIAN/control
          echo "Version: ${VERSION}" >> roboto_deb/DEBIAN/control
          echo "Architecture: arm64" >> roboto_deb/DEBIAN/control
          echo "Maintainer: Roboto AI <support@roboto.ai>" >> roboto_deb/DEBIAN/control
          echo "Description: Roboto CLI and Agent" >> roboto_deb/DEBIAN/control
          mkdir -p roboto_deb/usr/bin
          cp ./dist/roboto-linux-${{ matrix.arch }} roboto_deb/usr/bin/roboto
          cp ./dist/roboto-agent-linux-${{ matrix.arch }} roboto_deb/usr/bin/roboto-agent
          dpkg-deb --build roboto_deb dist/roboto-linux-${{ matrix.arch }}_${VERSION}.deb
      - uses: actions/upload-artifact@v4
        with:
          name: bin-artifacts
          path: dist/
          overwrite: true
  exercise-artifacts:
    needs: [build-bin-artifacts]
    strategy:
      matrix:
        include:
          - image: macos-latest
            os: macos
            arch: aarch64
          - image: macos-13
            os: macos
            arch: x86_64
          - image: ubuntu-20.04
            os: linux
            arch: x86_64
          - image: ubuntu-24.04-arm64
            os: linux
            arch: aarch64
          - image: windows-latest
            os: windows
            arch: x86_64
    runs-on: ${{ matrix.image }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-artifacts
          path: dist
      - name: Exercise roboto CLI
        run: |
          chmod +x ./dist/roboto-${{ matrix.os }}-${{ matrix.arch }}
          ./dist/roboto-${{ matrix.os }}-${{ matrix.arch }} --version --suppress-upgrade-check
      - name: Exercise roboto-agent
        run: |
          chmod +x ./dist/roboto-agent-${{ matrix.os }}-${{ matrix.arch }}
          ./dist/roboto-agent-${{ matrix.os }}-${{ matrix.arch }} --help
  release:
    needs: [exercise-artifacts, build-bin-artifacts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist
      - name: List artifacts
        run: ls -R dist
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/roboto-*
          make_latest: true
